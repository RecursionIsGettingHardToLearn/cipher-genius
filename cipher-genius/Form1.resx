<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAClvAAApbwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAkAAAAlAAAAEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAJgAA
        AAoAAAAAAAAAAAAAAAAAAAAIDhwjiyNHWOMQICixAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhMl
        L6kiRVbkCxUblAAAAAsAAAAAAAAAAAAAACgrVmvnZsv9/zRpg/wAAABWAAEBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEC
        AwAAAABMOXOP+mXK+/8lSl3tAAAAMAAAAAAAAAAAAAAAExkyP70/fZz/HjxK5AAAADYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAEBAAAAAC8iQ1TfPXqY/xQoMskAAAAaAAAAAAAAAAAAAQEAAAABJgECAroAAQFPAAAAAQAA
        AAUDAgJECggFZwsJBmYLCQZmCwkGZgsJBmYLCQZmCwkGZgsJBmYLCQZmCwkGZgsJBmYLCQZmCwkGZgsJ
        BmYLCQZmCgkFZgMDAkEAAAAEAAAAAAABAUgBAQK+AAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAlwAA
        ACMBAQEAAAAAR1tOMO+rk1v/q5Nb/6uTW/+rk1v/q5Nb/6uTW/+rk1v/q5Nb/6uTW/+rk1v/q5Nb/6uT
        W/+rk1v/q5Nb/6uTW/+rk1v/Y1Y16wAAAD4DAgEAAAAAHAAAAJoAAAAMAAAAAAAAAAAAAAAAAAAAAAAA
        AAUAAACWAAAARAAAABYBAQF7nYdU//7bh//614X/+teF//rXhf/614X/+teF//rXhf/614X/+teF//rX
        hf/614X/+teF//rXhf/614X/+teF//7bh/+okVn/BgUDcQAAABUAAAA+AAAAnAAAAAkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEAAAACLAAAAhgEBAbqdh1P/+tiF//bUg//21IP/9tSD//bUg//21IP/9tSD//fV
        g//31YT/9tSD//bUg//21IP/9tSD//bUg//21IP/+tiF/6aPWf8EAwK+AAAAkAAAAJYAAABMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAACAgIBb5yHU//62IX/9tSD//bUg//21IP/9tSD//bU
        g//31YP/58d7/+TEef/31YP/9tSD//bUg//21IP/9tSD//bUg//62IX/po9Y/wcGBHEAAAAFAAAABwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYFAwACAgFsnIdT//rYhf/21IP/9tSD//bU
        g//21IP/9tSD//rXhf+lj1j/loFQ//rXhf/21IP/9tSD//bUg//21IP/9tSD//rYhf+mj1j/BwYEbAwK
        BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAwXHQABAgM+Bw4SlgMHCGUAAAAIBQUDAAICAWych1P/+tiF//bU
        g//21IP/9tSD//bUg//21IP//NmG/6CKVf+Pe0z//NmG//bUg//21IP/9tSD//bUg//21IP/+tiF/6aP
        WP8HBgRsCwkGAAAAAAYGDA9cCxYbiwIEBTYKFBkAAAAAGhcvO8xKk7j/KlRp9AAAAH8AAABVAQEBoJyH
        U//62IX/9tSD//bUg//21IP/9tSD//fVhP/avHT/XE8y/1BEK//StXD/99WE//bUg//21IP/9tSD//bU
        g//62IX/po9Y/wUEA5sAAABNAAAAdy9edvFNm8L/GjRBxwAAABcAAAAgHz9O2Fy55/85cY76AAAAjwAA
        AF0BAQGknIdT//rYhf/21IP/9tSD//bUg//31IP/7s1+/15QNP9AMiz/QDIr/05CK//nx3v/99WE//bU
        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
        wP//AYD//4AB//+AAf//wAP//+AH///4H/8=
</value>
  </data>
</root>